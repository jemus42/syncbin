# Misc options ----

# Set up default repos
local({
  repos <- getOption("repos")
  repos[["CRAN"]] <- "https://cloud.r-project.org"

  # Setting up P3M depending on platform for binaries
  p3m_url <- NULL

  # osVersion is created when loading utils which hasn't happened yet
  # and these are identical apparently
  os_version <- utils::sessionInfo()$running

  if (grepl("^Ubuntu.*LTS$", os_version)) {
    # bionic, focal, jammy, ...
    release <- readLines("/etc/os-release")
    release <- release[grepl("^UBUNTU_CODENAME", release)]
    release <- strsplit(release, "=")[[1]][[2]]
    p3m_url <- sprintf(
      "https://packagemanager.posit.co/cran/__linux__/%s/latest",
      release
    )
  }

  if (grepl("^Red Hat", os_version)) {
    release <- readLines("/etc/os-release")
    release <- release[grepl("^VERSION_ID", release)]
    release <- strsplit(release, "=")[[1]][[2]]
    # I don't understand CentOS/Fedore/Red Hat
    if (grepl("8\\.\\d", release)) {
      p3m_url <- "https://packagemanager.posit.co/cran/__linux__/centos8/latest"
    } else if (grepl("9\\.\\d", release)) {
      p3m_url <- "https://packagemanager.posit.co/cran/__linux__/rhel9/latest"
    }
  }

  if (!is.null(p3m_url)) repos[["P3M"]] <- p3m_url
  options(repos = repos)
})

# This doesn't hurt on most systems and help on e.g. LRZ HPC due to weird circumstances where I'd
# otherwise install into the base R library which I do not want.
if (Sys.getenv("R_LIBS") == "") {
  Sys.setenv("R_LIBS" = Sys.getenv("R_LIBS_USER"))
}

# Options ---------------------------------------------------------------------------------------------------------
# enable autocompletions for package names in require(), library()
utils::rc.settings(ipck = TRUE)

options(
  menu.graphics = FALSE,
  max.print = 100, # Orig: 1000; Less risk of console flood
  Ncpus = max(1L, parallel::detectCores() - 1L), # CPU core detection, ensure minimum of 1
  mc.cores = max(1L, parallel::detectCores() - 1L),
  # styler complains about setting the option but it's like... right there.
  styler.cache_root = "styler",
  useFancyQuotes = FALSE, # fancy quotes are annoying and lead to 'copy + paste' bugs / frustrations
  # data.table  -------------------------------------
  datatable.print.class = TRUE,
  datatable.print.keys = TRUE,
  # prompt  ----------------------------------------
  prompt = "#> ",
  continue = " â†³ ",
  # usethis  ---------------------------------------
  usethis.full_name = "Lukas Burk",
  usethis.destdir = "~/repos/github/jemus42",
  usethis.protocol = "https",
  usethis.description = list(
    `Authors@R` = utils::person(
      "Lukas",
      "Burk",
      email = "github@quantenbrot.de",
      role = c("aut", "cre"),
      comment = c(ORCID = '0000-0001-7528-3795')
    ),
    License = "MIT + file LICENSE",
    Version = "0.0.0.9000"
  ),
  # blogdown  ---------------------------------------
  servr.daemon = TRUE,
  blogdown.author = "Lukas",
  # VSCode ------------------------------------------
  # activate RStudio Addins on command pallet
  vsc.rstudioapi = TRUE,
  # interactive plots with {httpgd}
  vsc.use_httpgd = TRUE,
  vsc.rstudioapi = TRUE,
  # code completion triggers
  languageserver.server_capabilities = list(
    signatureHelpProvider = list(triggerCharacters = list("(", ",", "$")),
    completionProvider = list(
      resolveProvider = TRUE,
      triggerCharacters = list(".", ":", "$")
    )
  )
)


if (!getOption("HTTPUserAgent", default = FALSE)) {
  options(HTTPUserAgent = sprintf("R/%s R (%s)", getRversion(), paste(getRversion(), R.version["platform"], R.version["arch"], R.version["os"])))
}


# mlr style for appropriate repositories only
if (grepl("mlr3", getwd()) || grepl("paradox", getwd())) {
  options(styler.addins_style_transformer = "styler.mlr::mlr_style()")
}

if (requireNamespace("rlang", quietly = TRUE)) {
  rlang::global_entrace()
}

if (interactive() & requireNamespace("prettycode", quietly = TRUE)) {
  suppressMessages(prettycode::prettycode())
}

# Possibly fix various locale issues
# Sys.setlocale('LC_ALL','C')
# options(encoding = "UTF-8")
# Also check via l10n_info()

# GitHub creds ----
# https://usethis.r-lib.org/articles/articles/git-credentials.html#what-about-the-remotes-and-pak-packages-
# Does not work on Ubuntu still and it's driving me insane
# Git credentials have brought me nothing but pain.
# So far using the `gh` cli utility for auth seems to be ok though? I gave up.
# if (Sys.info()[["sysname"]] == "Darwin") {
#  if (requireNamespace("gitcreds", quietly = TRUE)) {
#    Sys.setenv(GITHUB_PAT = gitcreds::gitcreds_get(use_cache = FALSE)$password)
#  } else {
#    message("package 'gitcreds' not found: install.packages('gitcreds')")
#  }
#}

# RS Themes -------------------------------------------------------------------------------------------------------
if (
  Sys.getenv("RSTUDIO") == "1" && requireNamespace("rsthemes", quietly = TRUE)
) {
  # pak::pak("gadenbuie/rsthemes")

  rsthemes::set_theme_light("GitHub {rsthemes}")
  rsthemes::set_theme_dark("Monokai Spacegray Eighties")
}

# Local overrides if needed --------------------------------------------------------------------------------------

if (file.exists("~/.Rprofile.local")) {
  source("~/.Rprofile.local")
}

# Startup ---------------------------------------------------------------------------------------------------------
.First <- function() {
  ee = new.env()
  ee$inspect = function(x) {
    requireNamespace("crayon", quietly = TRUE)
    header = crayon::combine_styles(crayon::bold, crayon::green)
    cat(header("Internal:"), "\n", sep = "")
    .Internal(inspect(x))
    if (!is.function(x)) {
      classes = class(x)
      for (cl in classes) {
        m = methods(class = cl)
        tab = attr(m, "info")
        if (nrow(tab) > 0L) {
          cat("\n", header(paste0("Generics for `", cl, "`:")), "\n", sep = "")
          cat(paste(tab$generic, collapse = ", "), "\n")
        }
      }
    }
    cat("\n", header("Structure:"), "\n", sep = "")
    str(x)

    cat("\n", header("Size:"), "\n", sep = "")
    print(object.size(x), units = "auto")

    invisible(x)
  }

  #' Check memory usage
  #'
  #' Utility based on batchtools' method of estimating memory.
  #' Needs to have called `gc(reset = TRUE)` before the task in question!
  #'
  #' @param unit (`"MB"`) Unit to return, one of `"B"`, `"MB"`, `"MiB"`, `"GB"`, `"GiB"`.
  #'    No effect if `pretty = TRUE`.
  #' @param pretty (`TRUE`) Uses `prettyunits::pretty_bytes()` to print result.
  #' @param style (`"default"`) Passed to `prettyunits::pretty_bytes(..., style = style)`.
  #'
  #' @source https://github.com/mllg/batchtools/blob/1196047ed5115d54bde2923848c1f3ec11fda6d2/R/doJobCollection.R#L153
  #'
  #' @example
  #' gc(reset = TRUE)
  #' my_ram_heavy_function(painful = TRUE)
  #' check_mem()
  ee$check_mem = function(unit = "MB", pretty = TRUE, style = "default") {
    memory.mult = c(if (.Machine$sizeof.pointer == 4L) 28L else 56L, 8L)
    mem.used = sum(gc()[, 1L] * memory.mult)

    if (!pretty) {
      scalar = switch(
        unit,
        B = 1,
        MB = 10^6,
        MiB = (2^10)^2,
        GB = 10^9,
        GiB = (2^10)^3
      )

      mem.used = mem.used / scalar
    } else {
      prettyunits::pretty_bytes(mem.used, style = style)
    }
  }

  #' Check memory before and after object creation, return difference
  #' @examples
  #' measure_memory({ rnorm(2^14) })
  ee$measure_memory = function(expression, ...) {
    before = check_mem(unit = "B", pretty = FALSE)
    eval(expression)
    after = check_mem(unit = "B", pretty = FALSE)
    prettyunits::pretty_bytes(after - before)
  }

  ee$bm = function(..., plot = FALSE) {
    requireNamespace("bench")
    requireNamespace("withr")

    withr::local_options(list(datatable.verbose = FALSE))
    bm = bench::mark(...)
    if (plot) print(ggplot2::autoplot(bm))
    return(bm)
  }

  ee$pkgdeps = function(pkg) {
    requireNamespace("pkgdepends")
    x = pkgdepends::new_pkg_deps(pkg)
    x$solve()
    x$draw()
  }

  ee$ubuntu_sysdep <- function(pkgs, nala = FALSE, add_sudo = TRUE) {
    reqs <- sapply(unique(pkgs), function(pkg) {
      remotes::system_requirements("ubuntu-24.04", package = pkg)
    })
    reqs <- unique(unlist(reqs))

    if (add_sudo) {
      reqs <- sapply(reqs, function(x) {
        paste0("sudo ", x)
      })
    }

    if (nala) {
      reqs <- sub("apt-get", replacement = "nala", reqs)
    }

    cat(reqs, sep = "\n")
  }

  ee$rstheme <- function(which = "auto") {
    if (!requireNamespace("rsthemes")) {
      message("rsthemes not installed, trying to install...")
      if (!(requireNamespace("pak", quietly = TRUE))) {
        install.packages("pak")
      }
      pak::pak("gadenbuie/rsthemes")
    }
    if (which == "auto") {
      if (!(requireNamespace("ipapi"))) {
        message("Need ipapi for automatic switching, trying to install...")
        pak::pak("hrbrmstr/ipapi")
      }
    }

    switch(
      which,
      auto = rsthemes::use_theme_auto(),
      light = rsthemes::use_theme_light(),
      dark = rsthemes::use_theme_toggle(),
      toggle = rsthemes::use_theme_toggle(),
      default = rsthemes::use_theme_rstudio_default(),
      favorite = rsthemes::use_theme_favorite()
    )
  }

  ee$q <- function() quit(save = "no")

  attach(ee, warn.conflicts = FALSE)

  # Startup msg -----------------------------------------------------------------------------------------------------
  if (interactive()) {
    version <- R.version.string
    date_string <- format(Sys.time(), "%a %F %T %z (%Z)")
    # utf8 <- l10n_info()$`UTF-8`

    if (requireNamespace("crayon", quietly = TRUE)) {
      #utf8 <- if (!utf8) crayon::bgRed("UTF-8 is disabled!") else NULL
      version <- crayon::bold(version)
    }

    startup_msg <- paste0(
      version,
      " on ",
      date_string,
      "\n"
    )

    cat(startup_msg, "\n\n")
  }
}
