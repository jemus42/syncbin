#!/usr/bin/env bash

# System update script - updates packages across different platforms

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
RESET='\033[0m'

# Icons/symbols (works in most modern terminals)
CHECK="✓"
ARROW="→"
PACKAGE="📦"
BREW="🍺"
GIT="🔄"
CLOCK="🕐"

# Helper functions
print_header() {
  echo
  echo -e "${BOLD}${BLUE}═══════════════════════════════════════════${RESET}"
  echo -e "${BOLD}${CYAN}  $1${RESET}"
  echo -e "${BOLD}${BLUE}═══════════════════════════════════════════${RESET}"
  echo
}

print_section() {
  echo
  echo -e "${BOLD}${MAGENTA}${ARROW} $1${RESET}"
  echo
}

print_success() {
  echo -e "${GREEN}${CHECK} $1${RESET}"
}

print_error() {
  echo -e "${RED}✗ $1${RESET}"
}

print_info() {
  echo -e "${CYAN}ℹ $1${RESET}"
}

timestamp() {
  date "+%Y-%m-%d %H:%M:%S"
}

# Main update logic
PLATFORM=$(uname -s)
print_header "System Update Manager"
print_info "Platform: ${BOLD}$PLATFORM${RESET}"
print_info "Time: $(timestamp)"

case $PLATFORM in
Linux)
  print_section "Updating Linux packages"
  
  if command -v nala >/dev/null 2>&1; then
    print_info "Using nala package manager"
    sudo nala update
    sudo nala upgrade -y
    sudo nala autoremove
  elif command -v apt >/dev/null 2>&1; then
    print_info "Using apt package manager"
    sudo apt update
    sudo apt upgrade -y
    sudo apt autoclean -y
    sudo apt autoremove -y
  else
    print_error "No supported package manager found"
  fi

  if command -v brew >/dev/null 2>&1; then
    print_section "Updating Homebrew ${BREW}"
    brew upgrade
    brew cleanup
    print_success "Homebrew updated"
  fi
  ;;
  
Darwin)
  if command -v brew >/dev/null 2>&1; then
    print_section "Updating Homebrew ${BREW}"
    brew upgrade
    brew cleanup
    print_success "Homebrew updated"
  fi

  if command -v Rscript >/dev/null 2>&1; then
    print_section "Updating R packages ${PACKAGE}"
    Rscript --quiet -e 'remotes::update_packages(type = "binary")' 2>/dev/null
    if [ $? -eq 0 ]; then
      print_success "R packages updated"
    else
      print_info "R package update completed (some packages may have been skipped)"
    fi
  fi
  ;;
  
FreeBSD)
  print_section "Updating FreeBSD packages"
  
  if [[ $USER = root ]]; then
    pkg update
    pkg upgrade -y
    pkg clean -y
    pkg autoremove -y
  else
    sudo pkg update
    sudo pkg upgrade -y
    sudo pkg clean -y
    sudo pkg autoremove -y
  fi
  print_success "FreeBSD packages updated"
  
  if command -v brew >/dev/null 2>&1; then
    print_section "Updating Homebrew ${BREW}"
    brew upgrade
    brew cleanup
    print_success "Homebrew updated"
  fi
  ;;
  
*)
  print_error "Unsupported platform: $PLATFORM"
  exit 1
  ;;
esac

# Update syncbin repository
print_section "Updating syncbin repository ${GIT}"

# Use SYNCBIN environment variable if set, otherwise try to detect
if [[ -z "$SYNCBIN" ]]; then
  # Try to find syncbin directory relative to this script
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  SYNCBIN="$(dirname "$SCRIPT_DIR")"
fi

if [[ -d "$SYNCBIN/.git" ]]; then
  # Check if there are any local changes
  if git -C "$SYNCBIN" diff-index --quiet HEAD -- 2>/dev/null; then
    git -C "$SYNCBIN" pull origin main --quiet
    git -C "$SYNCBIN" submodule update --recursive --rebase --remote --quiet
    print_success "Syncbin updated"
  else
    print_info "Syncbin has local changes, skipping update"
  fi
else
  print_error "Syncbin directory not found or not a git repository"
fi

# Final summary
echo
print_header "Update Complete ${CHECK}"
print_info "Finished at: $(timestamp)"
echo